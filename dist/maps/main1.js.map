{"version":3,"names":[],"mappings":"","sources":["main1.js"],"sourcesContent":["\n\n//We are exeecptionaly making derivationMethods  and rulesUsed  global variables because we are accessing it in math.js\n var derivationMethod = [];\nvar rulesUsed = [];\n  var vala = '1';\n  var valb = '2';\nready(function(){\n\n  var resultFunction = \"\";\n  var originalFunction = \"\";\n  // Variables\n  var goButton = document.getElementById(\"go-button\");\n\n  var exampleList =[\"0.7x\", \"-1/3x\", \"x + 1\", \"x - 1\", \"-x\", \"x^2\", \"x / (x^2 + 1)\", \"a * (x^2 + b)\", \"x ^ (-1/3)\", \"e ^ (1 - x)\", \"sqrt(x)\", \"root(7, x + 1)\", \"ln(x)\", \"log(x, 8)\", \"abs(x)\", \"sin(x)\", \"cos(x)\", \"tan(x)\", \"arcsin(x)\", \"arccos(x)\", \"arctan(x)\", \"sec(x)\", \"sinh(x)\", \"arsinh(x)\", \"erf(x)\", \"beta(x, y)\",\"e\"];\n  var errors=[];\n\n  var operators = document.getElementById('operators').querySelectorAll('div');\n  var examplesDiv = document.getElementById('examples');\n\n  //We use this function in order to put the sign in the input when clicked\n  for(var i=0;i<operators.length-1;i++){\n    operators[i].onclick = function(e){\n      if(this.innerHTML==\"Del\"){\n        document.getElementById('main-input').value = '';\n      }\n      else{\n        document.getElementById('main-input').value += this.innerHTML;\n      }\n    }\n  }\n  //Put the examples from the example list into the input field\n  for (var i =0; i<exampleList.length-1;i++){\n    var onClickString = \"document.getElementById('main-input').value='\"+exampleList[i].replace(/\\s/g, \"\")+\"';\"+\"document.getElementById('original-function').innerHTML=laTeXed('\"+exampleList[i].replace(/ /g,'')+\"');\"+\"MathJax.Hub.Queue(['Typeset',MathJax.Hub,document.getElementById('original-function')]);\";\n    examplesDiv.innerHTML += \"<div id='ex\"+i+\"' onclick=\"+onClickString+\" class='example'>\"+exampleList[i]+\"</div>\";\n    //Adds the example in the result section\n    document.getElementById('ex'+i).onclick=function(){\n    document.getElementById('main-input').value+=this.innerHTML.replace(/\\s/g, \"\");\n    document.getElementById('original-function').innerHTML= laTeXed(this.innerHTML.replace(/ /g,''));\n    MathJax.Hub.Queue([\"Typeset\",MathJax.Hub,document.getElementById('original-function')]);\n    }\n  }\n\n  document.getElementById('show-examples-button').onclick = function(){\n    if(examplesDiv.classList[0]=='show'){\n      examplesDiv.classList.remove(\"show\");\n      this.innerHTML = \"Show Examples\";\n    }\n    else{\n      examplesDiv.classList.add(\"show\");\n      this.innerHTML = \"Hide Examples\";\n    }\n  }\n  //End 'show-examples-button').onclick\n\n  //Listen to Changes to the input\n  var mainInput =  document.getElementById('main-input');\n  mainInput.addEventListener('input', function(e){\n    mainInput.value = this.value.toLowerCase();\n    var helper = document.getElementById('input-first-helper');\n    try{\n      helper.innerHTML = \"\";\n     document.getElementById('original-function').innerHTML= laTeXed(this.value.replace(/ /g,'')); \n     mainInput.classList.remove('not-ready');\n    }\n    catch(err){\n      mainInput.classList.add('not-ready');\n      var coordinates = mainInput.getBoundingClientRect();\n      \n      helper.style.cssText = \"top:\"+(coordinates.y-20)+\"px;left:\"+coordinates.x+\"px;\";\n      helper.innerHTML= parseErrorType(err.toString());\n    }\n\n      MathJax.Hub.Queue([\"Typeset\",MathJax.Hub,document.getElementById('original-function')]);\n  })\n\n  //Calculate the derivative after the Calculate Button is clicked\n  goButton.onclick = function(){\n    derivationMethod = [];\n    resultFunction=\"\";\n    rulesUsed=[];\n    //Deleting traces of results\n    \n    let nextButton = document.getElementById('next-derivative')\n    if(nextButton){\n      nextButton.remove()\n      \n      document.getElementById('secondary-results').innerHTML=\"\"\n      \n    }\n\n    // results.childNodes.forEach((node)=> {node.childNodes.forEach((bbnode)=>{if(bbnode.tagName==\"DIV\"){bbnode.innerHTML=\"\"}})})\n    try{\n      var inputEl = document.getElementById(\"main-input\");// Equal button\n      var originalFunction = inputEl.value;\n      originalFunction = inputFirstParser(originalFunction);\n      //Calculate the derivative\n      var resultFunction = getDerivative(originalFunction,resultFunction);\n      //Reset the errors\n      document.getElementById('derivative-calculator-errors').innerHTML= '';\n      //Write the results in the HTML\n      setResultHTML(originalFunction, resultFunction);\n      fireMathJax();\n      generateGraph(originalFunction,resultFunction);\n    }\n    //Catching potential errors and parsing some of them with Regex in order to have some nice rendering\n    catch(err){\n        console.log('hmmm there was an error with your input')\n        errMessage = parseErrorType(err.toString());\n         document.getElementById('derivative-calculator-errors').innerHTML= errMessage;\n        throw err;\n    } \n  }\n  //End goButton.onclick\n})\n\n\n// }\n  //Parser Convert to human language\n  function laTeXed(expression){\n \n    expression =   math.parse(expression);\n    var final =  '$$'+expression.toTex({parenthesis: 'keep'}) + '$$';\n    return final;\n  }\n  function LaTexDeriv(expression){\n    // var base = math.parse(expression.func)\n    var deriv = math.parse(expression.derivative);\n    return '$$\\\\frac{dn}{du}'+expression.func+'(x)='+deriv.toTex({parenthesis: 'keep'})+ '$$';\n  }\nfunction toHuman(value){\n  return math.format(value,14);\n}\n\n\nfunction getDerivative(originalFunction){\n  console.log(math.parse(originalFunction));\n  return toHuman(math.derivative((math.parse(originalFunction)), 'x'));\n}\n  //Fire MathJax\n  var fireMathJax=function(){\n  var script = document.createElement(\"script\");\n  script.type = \"text/javascript\";\n  script.src  = \"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML\";\n  document.getElementsByTagName(\"head\")[0].appendChild(script);\n   MathJax.Hub.Queue([\"Typeset\",MathJax.Hub,document.getElementById('results')]);\n \n \n  }\n\n//Thanks to http://youmightnotneedjquery.com/#ready\nfunction ready(fn) {\n  if (document.readyState != 'loading') {\n    fn();\n  } else if (document.addEventListener) {\n    document.addEventListener('DOMContentLoaded', fn);\n  } else {\n    document.attachEvent('onreadystatechange', function() {\n      if (document.readyState != 'loading')\n        fn();\n    });\n  }\n}\n\nfunction inputFirstParser(expression, targets){\n  // targets [0] is the thing we watn to change, and target [1]is what we want to change it to\n  var targets = [\n    [/arccos/g,'acos'],[/arcsin/g,'asin'],[/arctan/g,'atan']\n  ];\n   var result=expression;\n  for(var i=0;i<targets.length;i++){\n      var match;\n      // if(result.match(targets[i][0])==null){\n      //   continue\n      // }\n      //We detect the matches and for each appearance we splice with our special splice function,\n       // cut by the length of the found and replace with target[1]\n      while (match= targets[i][0].exec(result)){\n        // if(match.index==0){\n          result = result.splice(match.index,match[0].length,targets[i][1]);\n        // }\n        // else if(match.index==result.length+1){\n        //   result = result.splice(match.index,match[0].length-1,targets[i][1])\n        // }\n        // else{\n        // result = result.splice(match.index+1,match[0].length-1,targets[i][1])\n        // }\n    }\n    }\n     return result\n}\n//\nfunction checkReplaceConstants(expression, target,replacement){\n  // The regs is an array of two array first one with the regex the second with the replace value bit (very) dirty at the moment probably create a function to generate the regex next\n   var regs=[\n    [/([@\\s#\\$%\\^\\&\\+\\=\\*\\(\\)\\^\\/\\-](a)[@\\s#\\$%\\^\\&\\+\\=\\*\\(\\)\\^\\/\\-])|(^(a)[@\\s#\\$%\\^\\&\\+\\=\\*\\(\\)\\^\\/\\-])|([@\\s#\\$%\\^\\&\\+\\=\\*\\(\\)\\^\\/\\-](a)$)/g,\n    vala],\n    [/([@\\s#\\$%\\^\\&\\+\\=\\*\\(\\)\\^\\/\\-](b)[@\\s#\\$%\\^\\&\\+\\=\\*\\(\\)\\^\\/\\-])|(^(b)[@\\s#\\$%\\^\\&\\+\\=\\*\\(\\)\\^\\/\\-])|([@\\s#\\$%\\^\\&\\+\\=\\*\\(\\)\\^\\/\\-](b)$)/g,\n    valb],\n   ];\n    var result = expression.replace(/\\s/g, \"\");\n\n    var match, indexes= [];\n    for(var i=0;i<regs.length;i++){\n      if(result.match(regs[i][0])==null){\n        continue;\n      }\n      while (match= regs[i][0].exec(result)){\n        if(match.index==0){\n          result = result.splice(match.index,1,regs[i][1]);\n        }\n        else if(match.index==result.length+1){\n          result = result.splice(match.index,1,regs[i][1]);\n        }\n        else{\n        result = result.splice(match.index+1,1,regs[i][1]);\n        }\n    }\n    }\n    //Can potentially be used but wonky now\n    // if(replacement&&target){\n    //   var reg = ('('+target+')');\n    //   var match, indexes= [];\n    //   for(var i=0;i<regs.length;i++){\n    //     while (match= regs[i][0].exec(result)){\n    //       result = result.splice(match.index,1,replacement)\n    //     }\n    //     console.log(result)\n    //   }\n    // }\n    return result;\n}\n\nfunction lnParser(expression){\n  var result = expression;\n  var checkln = new RegExp('ln','g');\n  // var checkGama = new RegExp('gamma','g');\n\n  var match, indexes= [];\n  while (match= checkln.exec(result)){\n    indexes.push(match.index)\n    if(indexes.length>1){\n      if(indexes[indexes.length-1]<= indexes[indexes.length-2]){\n        break;\n      }\n    }\n    // The +3 takes into consideration ln length\n    var matchingPar =findMatchParenthesisPos(result, match.index+2);\n    if(matchingPar==-1){\n      result = result.splice(matchingPar,1,',e)')\n      throw new Error('There is not matchingPar');\n    }\n\n    result = result.splice(match.index,2,'log');\n      \n      console.log(result);\n    }\n  // result = checkReplaceConstants(result)\n  return result;\n}\nfunction findMatchParenthesisPos(expression,start){\n  var open = /\\(/;\n  var match,indexes=[];\n  var openBr = 0;\n  var pos = start;\n  for(var i=pos; i<expression.length;i++){\n    if(expression[i]=='('){\n      openBr+=1;\n    }\n    if(expression[i]==')'){\n      openBr-=1;\n    }\n    if(openBr==0){\n      return i;\n    }\n  }\n  return -1;\n};\n// Graph function\n// Graph Plotting Section\n  var generateGraph = function(originalFunction,resultFunction){\n    //Detect if there is a a or b constant and if so replace it with val a or valb in order to plot\n\n    var resultGraphF=checkReplaceConstants(resultFunction);\n    var originalGraphF = checkReplaceConstants(originalFunction);\n   \n    // resultGraphF=checkReplaceConstants(resultGraphF)\n    // originalGraphF = checkReplaceConstants(originalGraphF)\n   resultGraphF=lnParser(resultGraphF);\n    originalGraphF = lnParser(originalGraphF);\n   \n   // The plotting tool is a bid dumb so we have to do some transformations sometimes\n    var forbidReg = new RegExp(\"ln\",\"g\");\n   if(originalGraphF.match(forbidReg)){\n      originalGraphF = XCalc.createExpression(originalGraphF).formula()\n    }\n    console.log(resultGraphF);\n    console.log(originalGraphF);\n      functionPlot({\n      target: '#quadratic',\n      data: [\n      {\n          fn: resultGraphF,\n          graphType: 'polyline',\n          color:'red',\n          range:[-10,10],\n          nSamples: 1000\n          },\n          {\n          fn: originalGraphF,\n          graphType: 'polyline',\n          color:'black',\n          updateOnMouseMove:true\n          }\n        \n      ],\n      });\n  };\n\nvar setResultHTML = function(originalFunction, resultFunction){\n\n  var originalSimplified = math.format(math.simplify(originalFunction));\n  //reset the innerHTML\n  document.getElementById('result-function').innerHTML ='';\n  document.getElementById('original-function').innerHTML='';\n  document.getElementById('steps-function').innerHTML='';\n  document.getElementById('rules-used').innerHTML='';\n\n  //Display Original Function in Latex Form\n\n  document.getElementById('original-function').innerHTML= laTeXed(originalFunction.replace(/ /g,''));\n  document.getElementById('original-function-simplified').innerHTML= laTeXed(originalSimplified);\n  \n  //Display result Function in Latex Form\n  var resultSimplified = math.format(math.simplify(resultFunction));\n  document.getElementById('result-function').innerHTML = laTeXed(resultFunction.replace(/ /g,''));\n  document.getElementById('result-function-simplified').innerHTML = laTeXed(resultSimplified);\n  \n\n  for(let x=0;x<derivationMethod.length;x++){\n    document.getElementById('steps-function').innerHTML += LaTexDeriv(derivationMethod[x]);\n  }\n  if(rulesUsed.length==0){\n     document.getElementById('rules-used').innerHTML = \"No chaining rule used!\";\n  }\n    for(let x=0;x<rulesUsed.length;x++){\n    document.getElementById('rules-used').innerHTML += rulesUsed[x]+'\\n';\n  }\n  var nextFunctionBtn = document.createElement(\"BUTTON\");\n  nextFunctionBtn.setAttribute('id','next-derivative');\n  nextFunctionBtn.classList.add('btn');\n  nextFunctionBtn.classList.add('btn-dark');\n  nextFunctionBtn.innerHTML=\"Next derivative\";\n  nextFunctionBtn.onclick = function(){\n    try{\n      //Calculate the derivative\n      var newResultFunction = getDerivative(resultFunction);\n      //Reset the errors\n      document.getElementById('derivative-calculator-errors').innerHTML= '';\n      //Write the results in the HTML\n      appendResultHTML(resultFunction, newResultFunction,2);\n      fireMathJax();\n      generateGraph(resultFunction,newResultFunction);\n    }\n    //Catching potential errors and parsing some of them with Regex in order to have some nice rendering\n    catch(err){\n        console.log('hmmm there was an error with your input')\n        errMessage = parseErrorType(err.toString());\n         document.getElementById('derivative-calculator-errors').innerHTML= errMessage;\n        throw err;\n    } \n  }\n  document.getElementById('results').appendChild(nextFunctionBtn);\n}\n\nvar appendResultHTML = function(originalFunction, resultFunction, iteration){\n  var newResult = document.createElement(\"div\");\n  var newResultTitle = document.createElement(\"h5\")\n  newResultTitle.innerHTML = iteration + 'th derivative'\n  newResult.setAttribute('id','derivative-result-'+iteration);\n  newResultTitle.classList.add('secondary-derivative-result-title');\n  newResult.classList.add('secondary-derivative-result');\n  newResult.innerHTML = laTeXed(resultFunction.replace(/ /g,''))\n  // nextFunctionBtn.setAttribute('id','next-derivative');\n  document.getElementById('secondary-results').appendChild(newResultTitle)\n  document.getElementById('secondary-results').appendChild(newResult)\n  console.log(\"originalFunction is \" + originalFunction);\n  console.log(\"result function is \" + resultFunction);\n  document.getElementById('next-derivative').onclick = function(){\n    try{\n      //Calculate the derivative\n      var newResultFunction = getDerivative(resultFunction);\n      //Reset the errors\n      document.getElementById('derivative-calculator-errors').innerHTML= '';\n      //Write the results in the HTML\n      appendResultHTML(resultFunction, newResultFunction, iteration+1);\n      fireMathJax();\n      generateGraph(originalFunction,resultFunction);\n    }\n    catch(err){\n      console.log(\"There was an error calculating the next derivative\");\n    }\n}\n}\n\nvar parseErrorType = function(str){\n        if(str.match(/SyntaxError: Parenthesis/g)){\n         return \"It seems like there is a missing Parenthesis in your function.\";\n        }\n        if(str.match(/SyntaxError: Unexpected end of expression/g)){\n          return \"It seems like your function ends up abruptly.\";\n        }\n        if(str.match(/TypeError: Too few arguments in function/g)){\n          //Detects the name of the empty function\n          var pbErr= str.match(/function+\\s[a-z][a-z][a-z]/)[0].slice(9, str.length-1);\n          return \"It seems like the \"+ pbErr +\" function is empty.\";\n        }\n        else{\n          return str;\n        }\n}\n//SPECIAL STRING SPLICER\n// Takes in 3 arguments, \n//{expression}the expression you are trying to check\n//{regEx} the value you are trying to find\n//{replacement} the value you want to replace the found regEx by\n// function regexCheckerReplacer(expression, regEx, replacement){\n//   var result = expression\n//    var match, indexes= [];\n//    while (match= regEx.exec(expression)){\n//       result = result.splice(match.index,5,replacement)\n//       var matchingPar =findMatchParenthesisPos(result, match.index)\n//       result = result.splice(matchingPar,1,',e)')\n//     }\n//     return result\n// }\n\n// cusotm Replace function from https://stackoverflow.com/questions/9932957/how-can-i-remove-a-character-from-a-string-using-javascript and https://stackoverflow.com/questions/4313841/javascript-how-can-i-insert-a-string-at-a-specific-index\nif (!String.prototype.splice) {\n    String.prototype.splice = function(start, delCount, newSubStr) {\n        return this.slice(0, start) + newSubStr + this.slice(start + Math.abs(delCount));\n    };\n}\n\n\n    "],"file":"../main1.js"}