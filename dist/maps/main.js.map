{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["\nvar vala = '1';\nvar valb = '2';\nvar derivationMethod = [];\nvar rulesUsed = [];\nvar exampleList =[\"0.7x\", \"-1/3x\", \"x + 1\", \"x - 1\", \"-x\", \"x^2\", \"x / (x^2 + 1)\", \"a * (x^2 + b)\", \"x ^ (-1/3)\", \"e ^ (1 - x)\", \"sqrt(x)\", \"root(7, x + 1)\", \"ln(x)\", \"log(x, 8)\", \"abs(x)\", \"sin(x)\", \"cos(x)\", \"tan(x)\", \"arcsin(x)\", \"arccos(x)\", \"arctan(x)\", \"sec(x)\", \"sinh(x)\", \"arsinh(x)\", \"erf(x)\", \"beta(x, y)\",\"e\"];\n\nvar unsupportedPlotDerivatives=[\n'ln', 'arccos', 'sec']\n// (function() {\n  //Parser Convert to human language\n  function laTeXed(expression){\n \n    expression =   math.parse(expression)\n    var final =  '$$'+expression.toTex({parenthesis: 'keep'}) + '$$'\n    console.log(final)\n    return final\n  }\n  function LaTexDeriv(expression){\n    // var base = math.parse(expression.func)\n    var deriv = math.parse(expression.derivative)\n    return '$$\\\\frac{dn}{du}'+expression.func+'(x)='+deriv.toTex({parenthesis: 'keep'})+ '$$'\n  }\nfunction toHuman(value){\n  return math.format(value,14)\n}\n\n\nfunction getDerivative(originalFunction){\n     // var tanReg = new RegExp('tan|gamma', 'g');\n     // var lnReg = new RegExp('ln|acos', 'g');\n     var result=[]\n\n    result.push(toHuman(math.derivative((math.parse(originalFunction)), 'x')))\n\n  return result\n}\n  //Fire MathJax\n  var fireMathJax=function(){\n  var script = document.createElement(\"script\");\n  script.type = \"text/javascript\";\n  script.src  = \"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML\";\n  document.getElementsByTagName(\"head\")[0].appendChild(script);\n  MathJax.Hub.Queue([\"Typeset\",MathJax.Hub,document.getElementById('original-function')]);\n\n  MathJax.Hub.Queue([\"Typeset\",MathJax.Hub,document.getElementById('result-function')]);\n  MathJax.Hub.Queue([\"Typeset\",MathJax.Hub,document.getElementById('result-function-simplified')]);\n  MathJax.Hub.Queue([\"Typeset\",MathJax.Hub,document.getElementById('original-function-simplified')]);\n\n  MathJax.Hub.Queue([\"Typeset\",MathJax.Hub,document.getElementById('steps-function')]);\n\n  MathJax.Hub.Queue([\"Typeset\",MathJax.Hub,document.getElementById('rules-used')]);\n\n \n \n  }\n  // \"use strict\";\nready(function(){\n// Shortcut to get elements\n  var el = function(element) {\n    if (element.charAt(0) === \"#\") { // If passed an ID...\n      return document.querySelector(element); // ... returns single element\n    }\n\n    return document.querySelectorAll(element); // Otherwise, returns a nodelist\n  };\n  // Variables\n\n  var inputEl = el(\"#main-input\");// Equal button\n  var goButton = el(\"#go-button\");\n  var resultFunction = [];\n  var originalFunction = \"\"\n  var operators = document.getElementById('operators').querySelectorAll('div')\n  var examplesDiv = document.getElementById('examples');\n\n  var getInput = function() {\n\n    originalFunction = inputEl.value\n\n    //Maybe put this in an Onchange function that can translate it live\n    originalFunction = inputFirstParser(originalFunction)\n      // Look for constants lie a or b because they break Xcal\n      try{\n\n    var originalSimplified = math.format(math.simplify(originalFunction))\n    console.log('succes')\n      }\n      catch(e){\n        console.log('noooo')\n      }\n    resultFunction = getDerivative(originalFunction);\n\n    console.log(originalFunction)\n    console.log(resultFunction)\n      // Setting the HTML to show the results\n\n      document.getElementById('result-function').innerHTML ='';\n      document.getElementById('original-function').innerHTML='';\n       document.getElementById('steps-function').innerHTML='';\n       document.getElementById('rules-used').innerHTML='';\n\n      document.getElementById('original-function').innerHTML= laTeXed(originalFunction.replace(/ /g,''))\n      document.getElementById('original-function-simplified').innerHTML= laTeXed(originalSimplified)\n      \n      for(let x=0;x<resultFunction.length;x++){\n      var resultSimplified = math.format(math.simplify(resultFunction[x]))\n        document.getElementById('result-function').innerHTML += laTeXed(resultFunction[x].replace(/ /g,''))\n        document.getElementById('result-function-simplified').innerHTML += laTeXed(resultSimplified)\n      }\n\n      for(let x=0;x<derivationMethod.length;x++){\n        console.log(derivationMethod[x].derivative)\n        document.getElementById('steps-function').innerHTML += LaTexDeriv(derivationMethod[x])\n      }\n      if(rulesUsed.length==0){\n         document.getElementById('rules-used').innerHTML = \"No chaining rule used!\"\n      }\n        for(let x=0;x<rulesUsed.length;x++){\n        document.getElementById('rules-used').innerHTML += rulesUsed[x]+'\\n';\n      }\n    fireMathJax();\n    generateGraph();\n  }\n  //We use this function in order to put the sign in the input when clicked\n  for(var i=0;i<operators.length-1;i++){\n    operators[i].onclick = function(e){\n      if(this.innerHTML==\"Del\"){\n        document.getElementById('main-input').value = '';\n      }\n      else{\n        document.getElementById('main-input').value += this.innerHTML;\n      }\n    }\n  }\n  //Put the examples of the example list in the input field\n  for (var i =0; i<exampleList.length-1;i++){\n\n\n        var onClickString = \"document.getElementById('main-input').value='\"+exampleList[i].replace(/\\s/g, \"\")+\"';\"+\n        \"document.getElementById('original-function').innerHTML=laTeXed('\"+exampleList[i].replace(/ /g,'')+\"');\"+\n        \"MathJax.Hub.Queue(['Typeset',MathJax.Hub,document.getElementById('original-function')]);\"\n    examplesDiv.innerHTML += \"<div id='ex\"+i+\"' onclick=\"+onClickString+\" class='example'>\"+exampleList[i]+\"</div>\";\n    //Adds the example in the result section\n      document.getElementById('ex'+i).onclick=function(){\n        console.log(this)\n        document.getElementById('main-input').value+=this.innerHTML.replace(/\\s/g, \"\");\n        document.getElementById('original-function').innerHTML= laTeXed(this.innerHTML.replace(/ /g,''))\n        MathJax.Hub.Queue([\"Typeset\",MathJax.Hub,document.getElementById('original-function')]);\n    }\n  }\n\n  document.getElementById('show-examples-button').onclick = function(){\n    if(examplesDiv.classList[0]=='show'){\n      examplesDiv.classList.remove(\"show\");\n      this.innerHTML = \"Show Examples\"\n    }\n    else{\n      examplesDiv.classList.add(\"show\");\n      this.innerHTML = \"Hide Examples\"\n    }\n  }\n\n  //Listen to Changes to the input\n  document.getElementById('main-input').addEventListener('input', function(e){\n    document.getElementById('original-function').innerHTML= laTeXed(this.value.replace(/ /g,''));\n    MathJax.Hub.Queue([\"Typeset\",MathJax.Hub,document.getElementById('original-function')]);\n  })\n\n  //Calculate the derivative after the Calculate Button is clicked\n  goButton.onclick = function(){\n    derivationMethod = []\n    resultFunction=[]\n    rulesUsed=[]\n    try{\n      getInput()\n    }\n    catch{\n      console.log('error')\n    }\n    \n  }\n\n\n\n// Graph function\n// Graph Plotting Section\n  var generateGraph = function(){\n    //Detect if there is a a or b constant and if so replace it with val a or valb in order to plot\n\n    var resultGraphF=checkReplaceConstants(resultFunction[0])\n    var originalGraphF = checkReplaceConstants(originalFunction)\n   \n    // resultGraphF=checkReplaceConstants(resultGraphF)\n    // originalGraphF = checkReplaceConstants(originalGraphF)\n   resultGraphF=lnParser(resultGraphF)\n    originalGraphF = lnParser(originalGraphF)\n   \n   // The plotting tool is a bid dumb so we have to do some transformations sometimes\n    var forbidReg = new RegExp(\"ln\",\"g\");\n   if(originalGraphF.match(forbidReg)){\n    console.log('found')\n      originalGraphF = XCalc.createExpression(originalGraphF).formula()\n    }\n    console.log(resultGraphF)\n    console.log(originalGraphF)\n      functionPlot({\n      target: '#quadratic',\n      data: [\n      {\n          fn: resultGraphF,\n          graphType: 'polyline',\n          color:'red',\n          range:[-10,10],\n          nSamples: 1000\n          },\n          {\n          fn: originalGraphF,\n          graphType: 'polyline',\n          color:'black',\n          updateOnMouseMove:true\n          }\n        \n      ],\n      })\n  }\n\n\n})\n  \n//Thanks to http://youmightnotneedjquery.com/#ready\nfunction ready(fn) {\n  if (document.readyState != 'loading') {\n    fn();\n  } else if (document.addEventListener) {\n    document.addEventListener('DOMContentLoaded', fn);\n  } else {\n    document.attachEvent('onreadystatechange', function() {\n      if (document.readyState != 'loading')\n        fn();\n    });\n  }\n}\n\nfunction inputFirstParser(expression, targets){\n  // targets [0] is the thing we watn to change, and target [1]is what we want to change it to\n  var targets = [\n    [/arccos/g,'acos'],[/arcsin/g,'asin'],[/arctan/g,'atan']\n  ]\n   var result=expression;\n   console.log(targets.length)\n  for(var i=0;i<targets.length;i++){\n      var match;\n      // if(result.match(targets[i][0])==null){\n      //   continue\n      // }\n      //We detect the matches and for each appearance we splice with our special splice function,\n       // cut by the length of the found and replace with target[1]\n      while (match= targets[i][0].exec(result)){\n        console.log(match)\n        // if(match.index==0){\n          result = result.splice(match.index,match[0].length,targets[i][1])\n        // }\n        // else if(match.index==result.length+1){\n        //   result = result.splice(match.index,match[0].length-1,targets[i][1])\n        // }\n        // else{\n        // result = result.splice(match.index+1,match[0].length-1,targets[i][1])\n        // }\n    }\n    console.log(result)\n   \n    }\n\n        console.log(result)\n     return result\n}\n//\nfunction checkReplaceConstants(expression, target,replacement){\n  // The regs is an array of two array first one with the regex the second with the replace value bit (very) dirty at the moment probably create a function to generate the regex next\n   var regs=[\n    [/([@\\s#\\$%\\^\\&\\+\\=\\*\\(\\)\\^\\/\\-](a)[@\\s#\\$%\\^\\&\\+\\=\\*\\(\\)\\^\\/\\-])|(^(a)[@\\s#\\$%\\^\\&\\+\\=\\*\\(\\)\\^\\/\\-])|([@\\s#\\$%\\^\\&\\+\\=\\*\\(\\)\\^\\/\\-](a)$)/g,\n    vala],\n    [/([@\\s#\\$%\\^\\&\\+\\=\\*\\(\\)\\^\\/\\-](b)[@\\s#\\$%\\^\\&\\+\\=\\*\\(\\)\\^\\/\\-])|(^(b)[@\\s#\\$%\\^\\&\\+\\=\\*\\(\\)\\^\\/\\-])|([@\\s#\\$%\\^\\&\\+\\=\\*\\(\\)\\^\\/\\-](b)$)/g,\n    valb],\n   ]\n    var result = expression.replace(/\\s/g, \"\");\n\n    var match, indexes= [];\n    for(var i=0;i<regs.length;i++){\n      if(result.match(regs[i][0])==null){\n        continue\n      }\n      while (match= regs[i][0].exec(result)){\n        if(match.index==0){\n          result = result.splice(match.index,1,regs[i][1])\n        }\n        else if(match.index==result.length+1){\n          result = result.splice(match.index,1,regs[i][1])\n        }\n        else{\n        result = result.splice(match.index+1,1,regs[i][1])\n        }\n        console.log(result)\n    }\n    }\n    //Can potentially be used but wonky now\n    // if(replacement&&target){\n    //   var reg = ('('+target+')');\n    //   var match, indexes= [];\n    //   for(var i=0;i<regs.length;i++){\n    //     while (match= regs[i][0].exec(result)){\n    //       result = result.splice(match.index,1,replacement)\n    //     }\n    //     console.log(result)\n    //   }\n    // }\n    return result\n}\n\nfunction lnParser(expression){\n  var result = expression\n  var checkln = new RegExp('ln','g');\n  // var checkGama = new RegExp('gamma','g');\n\n  var match, indexes= [];\n  while (match= checkln.exec(result)){\n    indexes.push(match.index)\n    if(indexes.length>1){\n      if(indexes[indexes.length-1]<= indexes[indexes.length-2]){\n        break;\n      }\n    }\n    console.log('match that index is '+ match.index)\n    // The +3 takes into consideration ln length\n    var matchingPar =findMatchParenthesisPos(result, match.index+2)\n    console.log(matchingPar)\n    if(matchingPar==-1){\n      result = result.splice(matchingPar,1,',e)')\n      throw new Error('There is not matchingPar')\n    }\n\n    result = result.splice(match.index,2,'log')\n      \n      console.log(result)\n    }\n  // result = checkReplaceConstants(result)\n  return result\n}\nfunction findMatchParenthesisPos(expression,start){\n  var open = /\\(/;\n  var match,indexes=[];\n  var openBr = 0;\n  var pos = start;\n  for(var i=pos; i<expression.length;i++){\n    if(expression[i]=='('){\n      openBr+=1\n    }\n    if(expression[i]==')'){\n      openBr-=1\n    }\n    if(openBr==0){\n      return i\n    }\n  }\n  return -1\n}\n\n// Takes in 3 arguments, \n//{expression}the expression you are trying to check\n//{regEx} the value you are trying to find\n//{replacement} the value you want to replace the found regEx by\n// function regexCheckerReplacer(expression, regEx, replacement){\n//   var result = expression\n//    var match, indexes= [];\n//    while (match= regEx.exec(expression)){\n//       result = result.splice(match.index,5,replacement)\n//       var matchingPar =findMatchParenthesisPos(result, match.index)\n//       result = result.splice(matchingPar,1,',e)')\n//     }\n//     return result\n// }\n\n// cusotm Replace function from https://stackoverflow.com/questions/9932957/how-can-i-remove-a-character-from-a-string-using-javascript and https://stackoverflow.com/questions/4313841/javascript-how-can-i-insert-a-string-at-a-specific-index\nif (!String.prototype.splice) {\n    String.prototype.splice = function(start, delCount, newSubStr) {\n        return this.slice(0, start) + newSubStr + this.slice(start + Math.abs(delCount));\n    };\n}\n\n\n    "],"file":"../main.js"}